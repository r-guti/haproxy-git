global
        log /dev/log    local0
        log /dev/log    local1 notice
        chroot /var/lib/haproxy
        stats socket /run/haproxy/admin.sock mode 660 level admin
        stats timeout 30s
        user haproxy
        group haproxy
        daemon
        stats socket /run/haproxy/haproxy.sock mode 660 level admin
        stats timeout 2m # Wait up to 2 minutes for input

        # Default SSL material locations
        ca-base /etc/ssl/certs
        crt-base /etc/ssl/private

        # See: https://ssl-config.mozilla.org/#server=haproxy&server-version=2.0.3&config=intermediate
        ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384
        ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
        ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets

defaults
        log     global
        mode    http
        option  httplog
        option  dontlognull
        timeout connect 5000
        timeout client  50000
        timeout server  50000
        errorfile 400 /etc/haproxy/errors/400.http
        errorfile 403 /etc/haproxy/errors/403.http
        errorfile 408 /etc/haproxy/errors/408.http
        errorfile 500 /etc/haproxy/errors/500.http
        errorfile 502 /etc/haproxy/errors/502.http
        errorfile 503 /etc/haproxy/errors/503.http
        errorfile 504 /etc/haproxy/errors/504.http

frontend myfrontend
        mode http
        bind 0.0.0.0:80
        bind 0.0.0.0:443 ssl crt /etc/ssl/certs/lab.pem ssl-min-ver TLSv1.2

        # Deny with HTTP code 403 request that start with /attack
        http-request deny if { path -i -m beg /attack }

        # Redirect from HTTP to HTTPS requests that start with /secure
        acl redirect_secure_url path_beg -i /secure
        redirect scheme https if !{ ssl_fc } redirect_secure_url

        ## Stick tables to rate limiting 10 request
        stick-table type ip size 1m expire 60s store http_req_cnt
        http-request track-sc0 src
        acl too_many_requests sc_http_req_cnt(0) gt 100
        http-request deny if too_many_requests

        # Use map file to check if path needs redirect
        acl needs_redirect path,map(/etc/haproxy/redirect.map) -m found

        # 301 (permanent) redirect if path matches our map
        http-request redirect code 301 location %[path,map(/etc/haproxy/redirect.map)] if needs_redirect

        # ACL to redirect /management | /data | /support to /management/ | /data/ | /support/
        acl path_to_change path_beg -i -M -f /etc/haproxy/convert.map
        http-request set-path %[path,map_sub(/etc/haproxy/convert.map)] if path_to_change

        #This backend send all the HTTP traffic to the Apache WAF for inspection
        default_backend Apache-WAF


frontend myfrontend2
        mode http
        bind 0.0.0.0:3000
        default_backend myservers

backend myservers
        option httpchk
        http-check expect status 200
        mode http
        balance leastconn
        server web1 192.168.50.210:80 check inter 10s
        server web2 192.168.50.211:80 check inter 10s

backend Apache-WAF
        mode http
        server apache 127.0.0.1:81 check

listen stats
        bind :9000
        mode http
        stats enable
        stats hide-version
        stats realm Haproxy Statistics
        stats uri /haproxy_stats
        stats auth rod:123
